{"version":3,"sources":["AddButton.js","GlasgowMap.js","Spinner.js","Scale.js","SideButtons.js","Title.js","Import.js","Header.js","ChangeList.js","index.js"],"names":["current","expression","mapCenter","zoomLevel","Spinner","type","color","height","width","React","Component","Scale","timeDiff","segment","this","props","method","Segment","inverted","style","background","Content","Grid","columns","padded","Column","position","facilities","key","text","value","borderColor","datazones","datazoneCoordinates","AddButton","handleOpen","setState","modalOpen","handleFacilityChange","event","data","addFacility","handleDataZoneChange","addDataZone","handleClose","handleSubmit","geo","a","async","state","datacode","parseInt","substr","coords","push","sourcepolygon","turf","sourcecentroid","turfCentroid","neighbours","getNeighbours","points","getCoordinates","calculateTravelTimes","pairs","neighbouringDatazones","Set","selectedCode","n","range","currentkey","j","length","JSON","stringify","includes","add","Array","from","currentCode","polygon","centroid","coordinates","sourcepoint","destpoints","promises","owntimes","times","axiosConfig","headers","dataPost","geometry","axios","post","then","res","minute","results","locations","properties","travel_time","time","Math","round","catch","err","console","log","respond","Promise","all","calculatePTravelTimes","dataPost1","response","checkChanges","changesDict","translateToName","parseToString","methodTimeDict","methodTimeString","carPercentage","ptPercentage","i","features","DataZone","CarTravelTimes","toFixed","PublicTransportTravelTimes","nameKey","timeDict","Object","keys","listitems","concat","parentCallback","parentCallbackSumbit","Name","facility","populateDropdown","code","geojson","Modal","size","trigger","Button","onClick","circular","icon","Icon","name","onClose","open","Header","className","Fragment","Dropdown","placeholder","fluid","selection","onChange","options","search","Actions","positive","labelPosition","content","Title","methodBoolean","dict","activeDomains","Group","vertical","active","changeDomain","textAlign","Import","reader","FileReader","onload","onReaderLoad","readAsText","target","files","parse","result","gettingImportedJson","url","as","htmlFor","accept","id","visibility","geoJSON","fileName","blob","Blob","URL","createObjectURL","href","link","document","createElement","download","body","appendChild","click","removeChild","gettingImported","imported","glasgow","car","city","changeMethod","Or","changeCity","ChangeList","populateContents","array","arrayOfContents","currentContent","k","carTime","ptTime","dz","line","toString","changes","contents","panels","_","title","Accordion","overflow","maxHeight","exclusive","styled","require","presets","L","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","iconUrl","shadowUrl","GlasgowMap","geoJSONRef","createRef","callbackFunction","childData","leafletElement","clearLayers","addData","callbackFunctionSubmit","changesList","getGlasgow","isFetching","get","domain","stateCopy","assign","map","Map","minZoom","center","zoom","TileLayer","attribution","GeoJSON","ref","feature","weight","fillOpacity","onEachFeature","layer","bindPopup","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.1ab8598d.chunk.js","sourcesContent":["import React from 'react';\nimport {Button, Icon, Modal, Dropdown} from \"semantic-ui-react\";\nimport Control from \"react-leaflet-control\";\nimport axios from 'axios';\nimport turfCentroid from \"@turf/centroid\";\nimport * as turf from \"@turf/helpers\";\n\n\n    const facilities = [{\n        key: 'GP',\n        text: 'GP',\n        value: 'GP',\n        style:{color:\"deepskyblue\", background:\"#243665\", borderColor:\"deepskyblue\"}\n    },\n        {\n            key: 'Primary School',\n            text: 'Primary School',\n            value: 'PrimarySchool',\n            style:{color:\"deepskyblue\", background:\"#243665\", borderColor:\"deepskyblue\"}\n        },\n        {\n            key: 'Secondary School',\n            text: 'Secondary School',\n            value: 'SecondarySchool',\n            style:{color:\"deepskyblue\", background:\"#243665\", borderColor:\"deepskyblue\"}\n        },\n        {\n            key: 'Post Office',\n            text: 'Post Office',\n            value: 'PostOffice',\n            style:{color:\"deepskyblue\", background:\"#243665\", borderColor:\"deepskyblue\"}\n        },\n        {\n            key: 'Shopping Facility',\n            text: 'Shopping Facility',\n            value: 'ShoppingFacilities',\n            style:{color:\"deepskyblue\", background:\"#243665\", borderColor:\"deepskyblue\"}\n        },\n    ];\n    let datazones = [];\n\n\n    let current;\n    let expression;\n    let datazoneCoordinates = {};\n\nexport default class AddButton extends React.Component {\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            modalOpen : false,\n            addFacility: \"\",\n            addDataZone: \"\",\n            listitems: []\n        };\n    }\n    handleOpen = () => this.setState({ modalOpen: true });\n\n    handleFacilityChange = (event, data) => {\n\n;     this.setState({addFacility: data.value});\n    };\n\n    handleDataZoneChange = (event, data) => {\n      this.setState({addDataZone: data.value});\n    };\n\n    handleClose = () =>{\n        this.setState({\n            modalOpen : false,\n\n        });\n    }\n\n    handleSubmit = async (geo) => {\n\n        this.setState({\n            modalOpen : false,\n\n        });\n        //check if both datazone and facility are selected\n        if(this.state.addDataZone && this.state.addFacility) {\n\n            let datacode = parseInt(this.state.addDataZone.substr(1));\n            let coords = [];\n            coords.push(datazoneCoordinates[datacode]);\n\n            let sourcepolygon = turf.multiPolygon([coords]);\n\n            let sourcecentroid = turfCentroid(sourcepolygon);\n\n\n            let neighbours = this.getNeighbours();\n\n            let points = this.getCoordinates(neighbours);\n\n\n            this.calculateTravelTimes(sourcecentroid, points, geo);\n        }\n\n\n    };\n\n    getNeighbours = () => {\n        let pairs;\n        let neighbouringDatazones = new Set();\n        let selectedCode = parseInt(this.state.addDataZone.substr(1));\n        pairs = datazoneCoordinates[selectedCode];\n\n        //looping through other data zone to check if points match with selected data zone\n        let range = 100;\n        let minus1 = -1;\n        let minusrange = range * minus1;\n        let padding = \"S0\";\n        //loop through data zones within a code range of given amount\n        for (var n = minusrange; n < range; n++) {\n            let currentkey = selectedCode + n;\n            //check selected datazone coordinates against other data zone coordinates\n            if(currentkey in datazoneCoordinates && (padding+currentkey != this.state.addDataZone)){\n            for (var j = 0; j < pairs.length; j++) {\n                    if ((JSON.stringify(datazoneCoordinates[currentkey]).includes(JSON.stringify(pairs[j])))) {\n                        neighbouringDatazones.add(\"S0\"+currentkey);\n                    }\n            }\n            }\n        }\n\n        return Array.from(neighbouringDatazones);\n    };\n    getCoordinates = (neighbours) => {\n\n        let currentCode;\n        let coordinates = [];\n        let polygon;\n        let centroid;\n        let pairs= {};\n        for(var a = 0; a < neighbours.length; a++) {\n            currentCode =neighbours[a];\n            let current = parseInt(currentCode.substr(1));\n            coordinates.push(datazoneCoordinates[current]);\n            polygon = turf.multiPolygon([coordinates]);\n            centroid = turfCentroid(polygon);\n            pairs[currentCode] = centroid;\n        }\n\n        return pairs;\n    };\n\n    calculateTravelTimes = async (sourcepoint, destpoints,geo) => {\n\n\n        let promises = [];\n        let times = {};\n        let owntimes = {\n            \"Car\" : 1.0,\n            \"PT\" : 3.0\n        };\n        times[this.state.addDataZone] = owntimes;\n\n\n        let axiosConfig = {\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n                'X-Application-Id': '4af0386c',\n                'X-Api-Key': '2eebb47cc3eba9d697483c016477976e'\n            }\n        };\n\n        for (let key in destpoints) {\n            times[key] = {};\n            let dataPost = {\n                \"locations\": [\n                    {\n                        \"id\": \"Facility\",\n                        \"coords\": {\n                            \"lat\": sourcepoint.geometry.coordinates[1],\n                            \"lng\": sourcepoint.geometry.coordinates[0]\n                        }\n                    },\n                    {\n                        \"id\": \"DataZone centroid\",\n                        \"coords\": {\n                            \"lat\": destpoints[key].geometry.coordinates[1],\n                            \"lng\": destpoints[key].geometry.coordinates[0]\n                        }\n                    }\n                ],\n                \"departure_searches\": [\n                    {\n                        \"id\": \"departure search example\",\n                        \"departure_location_id\": \"Facility\",\n                        \"arrival_location_ids\": [\n                            \"DataZone centroid\"\n                        ],\n                        \"transportation\": {\n                            \"type\": \"driving\"\n                        },\n                        \"departure_time\": \"2020-03-20T10:00:00Z\",\n                        \"properties\": [\"travel_time\", \"distance\", \"route\"]\n                    }\n                ]\n            };\n\n            promises.push(\n                axios.post('https://api.traveltimeapp.com/v4/routes', dataPost, axiosConfig)\n                    .then((res) => {\n                        let minute = (res.data.results[0].locations[0].properties[0].travel_time) / 60;\n\n                        let time = Math.round(minute * 10) / 10;\n                        times[key][\"Car\"] = time;\n\n                    })\n                    .catch((err) => {\n                        console.log(\"AXIOS ERROR: \", err.respond);\n                    })\n            );\n        }\n\n\n        Promise.all(promises).then(() =>this.calculatePTravelTimes(sourcepoint, destpoints,times,geo));\n    };\n    calculatePTravelTimes = async (sourcepoint, destpoints,times, geo) => {\n        if(this.state.addFacility !== \"PrimarySchool\" || this.state.addFacility !== \"SecondarySchool\") {\n\n            let promises = [];\n\n            let axiosConfig = {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json',\n                    'X-Application-Id': 'cd8dab5e',\n                    'X-Api-Key': '3b67e6f052bc7121e2f6bcb917024443'\n                }\n            };\n\n            for (let key in destpoints) {\n\n                let dataPost1 = {\n                    \"locations\": [\n                        {\n                            \"id\": \"Facility\",\n                            \"coords\": {\n                                \"lat\": sourcepoint.geometry.coordinates[1],\n                                \"lng\": sourcepoint.geometry.coordinates[0]\n                            }\n                        },\n                        {\n                            \"id\": \"DataZone centroid\",\n                            \"coords\": {\n                                \"lat\": destpoints[key].geometry.coordinates[1],\n                                \"lng\": destpoints[key].geometry.coordinates[0]\n                            }\n                        }\n                    ],\n                    \"departure_searches\": [\n                        {\n                            \"id\": \"departure search example\",\n                            \"departure_location_id\": \"Facility\",\n                            \"arrival_location_ids\": [\n                                \"DataZone centroid\"\n                            ],\n                            \"transportation\": {\n                                \"type\": \"public_transport\"\n                            },\n                            \"departure_time\": \"2020-03-20T10:00:00Z\",\n                            \"properties\": [\"travel_time\", \"distance\", \"route\"]\n                        }\n                    ]\n                };\n\n                promises.push(\n                    axios.post('https://api.traveltimeapp.com/v4/routes', dataPost1, axiosConfig)\n                        .then((res) => {\n                            let minute = (res.data.results[0].locations[0].properties[0].travel_time) / 60;\n\n                            let time = Math.round(minute * 10) / 10;\n                            times[key][\"PT\"] = time;\n\n                        })\n                        .catch((err) => {\n                            console.log(\"AXIOS ERROR: \", err.response);\n                        })\n                );\n            }\n\n            Promise.all(promises).then(() => this.checkChanges(times, geo));\n        }\n    };\n\n\n    checkChanges = async(times, geo)  => {\n\n        let changesDict={\n            \"DataZone\":this.translateToName(this.state.addDataZone, geo),\n            \"Facility\":this.parseToString(this.state.addFacility),\n            \"NeighbouringDataZones\":[]\n        };\n        for (let key in times) {\n            let methodTimeDict = {};\n            let methodTimeString = \"\";\n            let carPercentage, ptPercentage;\n\n            for (let i = 0; i < geo.features.length; i++){\n                let currentTimes = [];\n\n\n                if(geo.features[i].properties.DataZone === key){\n                    //compare new time with old time for neighbours\n                    if(geo.features[i].properties.CarTravelTimes[this.state.addFacility] > times[key][\"Car\"]){\n                        carPercentage = times[key][\"Car\"]/geo.features[i].properties.CarTravelTimes[this.state.addFacility];\n                        carPercentage = 1-carPercentage;\n                        carPercentage = carPercentage.toFixed(2);\n                        methodTimeString = geo.features[i].properties.CarTravelTimes[this.state.addFacility] + \" => \" + times[key][\"Car\"] + \" (\"+(carPercentage*100).toFixed(0)+ \"%)\";\n\n                        methodTimeDict[\"CarChanges\"] = methodTimeString;\n\n                        geo.features[i].properties.CarTravelTimes[this.state.addFacility] = times[key][\"Car\"]\n                    }\n                    if(geo.features[i].properties.PublicTransportTravelTimes[this.state.addFacility] > times[key][\"PT\"]){\n                        ptPercentage = times[key][\"PT\"]/geo.features[i].properties.PublicTransportTravelTimes[this.state.addFacility];\n\n                        ptPercentage = 1-ptPercentage;\n                        ptPercentage = ptPercentage.toFixed(2);\n\n                        methodTimeString = geo.features[i].properties.PublicTransportTravelTimes[this.state.addFacility] + \" => \" + times[key][\"PT\"] + \" (\"+(ptPercentage*100).toFixed(0)+ \"%)\";\n\n                        methodTimeDict[\"PTChanges\"] = methodTimeString;\n\n                        geo.features[i].properties.PublicTransportTravelTimes[this.state.addFacility] = times[key][\"PT\"];\n\n                    }\n\n                }\n            }\n\n            let nameKey = this.translateToName(key, geo);\n\n                let timeDict = {[nameKey]: methodTimeDict};\n\n\n            //doesnt push if no changes were made\n            if(Object.keys(timeDict[nameKey]).length>0) {\n                changesDict[\"NeighbouringDataZones\"].push(timeDict)\n            }\n\n        }\n\n        this.setState({listitems : this.state.listitems.concat(changesDict)});\n\n\n        this.props.parentCallback(geo);\n        this.props.parentCallbackSumbit(this.state.listitems);\n    };\n\n    translateToName = (datacode, geo) => {\n\n        for(let i = 0; i<geo.features.length; i++){\n            if(geo.features[i].properties.DataZone === datacode){\n                return geo.features[i].properties.Name;\n            }\n        }\n    };\n\n    parseToString = (facility) =>{\n\n        switch(facility) {\n            case \"GP\":\n                return \"GP\";\n            case \"PrimarySchool\":\n                return \"Primary School\";\n            case \"SecondarySchool\":\n                return \"Secondary School\";\n            case \"PostOffice\":\n                return \"Post Office\";\n            case \"ShoppingFacilities\":\n                return \"Shopping Facility\";\n            default:\n            // code block\n        }\n    };\n\n    //to load all data zones in dropdown options\n   populateDropdown = (data) => {\n\n        datazones = [];\n       let code;\n       let coords;\n       for (let i = 0; i < data.features.length; i++) {\n           current = data.features[i].properties;\n           expression = current.Name + \" (\" + current.DataZone + \")\";\n           datazones[i] = {\n               key: expression,\n               text: expression,\n               value: current.DataZone,\n               style:{color:\"deepskyblue\", background:\"#243665\", borderColor:\"deepskyblue\"},\n           };\n           //also populates datazone coordinates dictionary\n           code = parseInt(current.DataZone.substr(1));\n           coords = data.features[i].geometry.coordinates[0];\n           datazoneCoordinates[code] = coords;\n       }\n       return datazones;\n   };\n\n    render() {\n\n        const geojson = this.props.geo;\n\n\n        return(\n\n            <Control position=\"topright\" >\n                <Modal  size = \"tiny\"\n                    trigger={ <Button onClick = {this.handleOpen}\n                                      style = {{color: \"deepskyblue\", background:\"#243665\"}}\n                                      circular icon> <Icon name = \"plus\" size =\"large\"></Icon>   </Button>}\n                        onClose={this.handleClose}\n                        open={this.state.modalOpen}\n                       >\n                    <Modal.Header className = \"modalHeader\">\n                        <p>Adding facility</p>\n                    </Modal.Header>\n                    <Modal.Content className = \"modalContent\" >\n                        <React.Fragment >\n                    <Dropdown className = \"modalDropdown\"\n                        placeholder='Select Facility'\n                        fluid\n                        selection\n                              onChange = {this.handleFacilityChange}\n                        options={facilities}\n                    />\n                            {<br/>}\n\n                            <Dropdown className = \"modalDropdown\"\n                                placeholder='Select Data Zone'\n                                fluid\n                                search\n                                selection\n                                onChange = {this.handleDataZoneChange}\n                                options={this.populateDropdown(geojson)}\n                            />\n\n                        </React.Fragment>\n                    </Modal.Content>\n                    <Modal.Actions className = \"modalAction\">\n                        <Button className = \"modalButton\"\n                            onClick={()=> this.handleSubmit(geojson)}\n                            positive\n                            labelPosition='right'\n                            icon='checkmark'\n                            content='Done'\n                        />\n                    </Modal.Actions>\n            </Modal>\n            </Control>\n\n\n        );\n    }\n}","import React,  { createRef, Component } from 'react';\nimport { Map, TileLayer, GeoJSON, Marker} from 'react-leaflet';\nimport \"leaflet/dist/leaflet.css\";\nimport './index.css';\nimport Spinner from './Spinner';\nimport Scale from './Scale';\nimport AddButton from \"./AddButton\";\nimport SideButtons from \"./SideButtons\";\nimport Header from \"./Header\"\nimport ChangeList from \"./ChangeList\";\nimport axios from 'axios';\nimport 'semantic-ui-css/semantic.min.css'\nimport L from 'leaflet';\nrequire('@babel/register')({\n    presets: ['es2015', 'react']\n});\n\ndelete L.Icon.Default.prototype._getIconUrl;\n\nL.Icon.Default.mergeOptions({\n    iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n    iconUrl: require('leaflet/dist/images/marker-icon.png'),\n    shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n});\n\nlet mapCenter;\nlet zoomLevel;\nlet minZoomLevel;\nlet time = 0;\nconst tileLayerAtrribute = '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors';\nlet tileLayerUrl = 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';\nlet glasgow = \"https://api.npoint.io/aa3a9094c684db09d0f8\";\nlet methodBoolean = true;\n\nexport const doDecrement = (prevState) => ({\n    counter: prevState.counter - 1,\n});\n\n\nclass GlasgowMap extends React.Component {\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            isFetching: true,\n            geo: [],\n            domain: \"City\",\n            method: 'Car',\n            city: \"Glasgow\",\n            changesList:[],\n            activeDomains: {\n                \"City\": true,\n                \"GP\": false,\n                \"PrimarySchool\": false,\n                \"SecondarySchool\": false,\n                \"PostOffice\": false,\n                \"ShoppingFacilities\": false\n            },\n\n        };\n    }\n    geoJSONRef = React.createRef();\n\n    callbackFunction = (childData) => {\n        this.geoJSONRef.current.leafletElement.clearLayers();\n        this.geoJSONRef.current.leafletElement.addData(childData);\n\n        this.setState({geo: childData});\n\n    };\n\n    callbackFunctionSubmit = (changes) => {\n        this.setState({\n            changesList: changes\n        });\n    };\n\n    componentDidMount() {\n        document.title = 'CTYPLNR';\n        this.getGlasgow();\n\n    };\n\n    getGlasgow = () => {\n\n        this.setState({isFetching: true});\n        axios.get(glasgow).then(res => {\n            this.setState({\n                isFetching: false,\n                geo: res.data,\n                domain: 'City',\n            });\n        });\n    };\n\n    changeMethod = (method) => {\n        if(method === \"PublicTransport\" && (this.state.domain === \"PrimarySchool\" || this.state.domain === \"SecondarySchool\")){\n            this.changeDomain(\"City\");\n        }\n        this.setState({\n            method: method\n        });\n\n    };\n\n    changeDomain = (domain) => {\n        let stateCopy = Object.assign({}, this.state);\n        stateCopy.activeDomains[this.state.domain] = false;\n        stateCopy.domain = domain;\n        stateCopy.activeDomains[stateCopy.domain] = true;\n        this.setState(\n            stateCopy\n        );\n    };\n\n    changeCity = (city) => {\n        let url = \"\";\n        if (city === \"Glasgow\"){\n            url = \"https://api.npoint.io/aa3a9094c684db09d0f8\"\n        }\n        else{\n            url = \"https://api.npoint.io/f7c3649ae02eea7f5e92\"\n        }\n\n        this.setState({isFetching: true});\n        axios.get(url).then(res => {\n            this.setState({\n                isFetching: false,\n                geo: res.data,\n                city: city\n            });\n        });\n        methodBoolean = true;\n\n    };\n\n\n   render() {\n\n\n        const { isFetching, geo, domain, method,city} = this.state;\n\n        if(city === \"Glasgow\"){\n            mapCenter = [55.8595, -4.2518];\n            zoomLevel = 12;\n            minZoomLevel = zoomLevel;\n        }\n        else{\n            mapCenter = [55.933251, -3.268267];\n            zoomLevel = 12;\n\n        }\n\n        let map;\n        if(isFetching){\n            map = <div className = \"spinner-container\"><Spinner></Spinner></div>\n        }\n        else{\n                map = <Map className=\"map\"\n                           minZoom = {zoomLevel}\n                           center={mapCenter}\n                           zoom={zoomLevel}\n                >\n                    <TileLayer\n                        attribution={tileLayerAtrribute}\n                        url={tileLayerUrl}\n                    />\n\n\n                    <AddButton\n                        geo={this.state.geo}\n                        parentCallback={this.callbackFunction}\n                        parentCallbackSumbit = {this.callbackFunctionSubmit}\n\n\n                    />\n                    <ChangeList\n                        changes={this.state.changesList}\n                        />\n\n                    <Scale\n                        method = {this.state.method}\n                    />\n\n                    <GeoJSON\n                        data={geo}\n                        ref={this.geoJSONRef}\n                        style={getStyle}\n                        onEachFeature={onEachFeature}/>\n                </Map>\n\n        }\n\n\n        function getStyle(feature){\n\n            if(feature.properties.CarTravelTimes[\"GP\"] === 1){\n\n            }\n\n            let timeDiff;\n            if(domain !== \"City\"){\n                if(method === \"Car\") {\n\n                    time = feature.properties.CarTravelTimes[domain];\n\n\n                    timeDiff = 1;\n\n                }\n                else{\n                        time = feature.properties.PublicTransportTravelTimes[domain];\n                        timeDiff = 3;\n                    }\n                }\n            else{\n\n                return{\n                color:\"black\",\n                    weight: 1.5,\n                    fillOpacity:0.4\n\n                 }\n            }\n\n                if(time >= 0 && time < timeDiff){\n\n                    return{\n                        color: \"navy\",\n                        weight: 1.5\n                    }\n                }\n                else if(time >= timeDiff && time < timeDiff*2){\n\n                    return{\n                        color:\"royalblue\",\n                        weight: 1.5,\n                        fillOpacity:0.5\n                    }\n                }\n                else if(time >= timeDiff*2 && time < timeDiff*3){\n\n                    return{\n                        color:\"seagreen\",\n                        weight: 1.5,\n                        fillOpacity:0.5\n                    }\n                }\n                else if(time >= timeDiff*3 && time < timeDiff*4){\n                    return{\n                        color:\"yellow\",\n                        weight: 1.5,\n                        fillOpacity:0.5\n                    }\n\n                }\n                else if(time >= timeDiff*4 && time < timeDiff*5){\n                    return{\n                        color:\"orange\",\n                        weight: 1.5,\n                        fillOpacity:0.5\n                    }\n\n                }\n                else if(time >= timeDiff*5){\n                    return{\n                        color:\"maroon\",\n                        weight: 1.5,\n                        fillOpacity:0.5\n                    }\n            }\n                else{\n                return {\n                    color:\"white\",\n                    weight: 1.5,\n                    fillOpacity:0.75\n                }}\n            }\n\n       function onEachFeature (feature, layer) {\n           layer.bindPopup(\"Name: \" + feature.properties.Name + \"<br>\" + \"DataCode: \" + feature.properties.DataZone);\n       }\n\n       return (\n\n            <div className = \"main\"\n\n            >\n\n              <Header\n                  geoJSON={this.state.geo}\n                  city = {this.state.city}\n                  method = {this.state.method}\n                  changeMethod = {this.changeMethod}\n                  changeCity = {this.changeCity}\n                  parentCallback={this.callbackFunction}\n              />\n\n                {map}\n\n                <SideButtons\n                    method = {this.state.method}\n                    changeDomain = {this.changeDomain}\n                    activeDomains = {this.state.activeDomains}\n                    />\n\n                </div>\n        );\n    }\n}\n\nexport default GlasgowMap;\n","import \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\r\nimport Loader from 'react-loader-spinner'\r\nimport React from 'react';\r\nexport default class Spinner extends React.Component {\r\n\r\n    render() {\r\n        return(\r\n            <Loader\r\n                type=\"Oval\"\r\n                color=\"deepskyblue\"\r\n                height={300}\r\n                width={300}\r\n\r\n\r\n            />\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport {Grid, Header, Segment} from \"semantic-ui-react\";\r\nimport Control from \"react-leaflet-control\";\r\nexport default class Scale extends React.Component {\r\n\r\n    render() {\r\n        let method = this.props.method;\r\n        let timeDiff,segment\r\n        if(method === \"Car\") {\r\n            timeDiff = 1;\r\n            segment = <Segment inverted style={{background: \"rgba(36,54,101,0.7)\", height:\"100%\", width:\"24vw\"}}>\r\n                <Header inverted>\r\n                    <Header.Content style = {{color: \"deepskyblue\"}}>Travel times in minutes</Header.Content>\r\n                </Header>\r\n                <Grid  columns=\"equal\" style={{ width: '22vw', height:\"100%\"}} padded>\r\n                    <Grid.Column style = {{background:'navy'}}>0 - {timeDiff}</Grid.Column>\r\n                    <Grid.Column style = {{background:'royalblue'}}>{timeDiff} - {timeDiff*2}</Grid.Column>\r\n                    <Grid.Column style = {{background:'seagreen'}}>{timeDiff*2} - {timeDiff*3}</Grid.Column>\r\n                    <Grid.Column color = \"yellow\">{timeDiff*3} - {timeDiff*4}</Grid.Column>\r\n                    <Grid.Column style = {{background:'darkorange'}}>{timeDiff*4} - {timeDiff*5}</Grid.Column>\r\n                    <Grid.Column style = {{background:'maroon'}}>{timeDiff*5}+</Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        }\r\n        else{\r\n            timeDiff = 3;\r\n            segment = <Segment inverted style={{background: \"rgba(36,54,101,0.7)\", height:\"100%\", width:\"26.5vw\"}}>\r\n                <Header inverted>\r\n                    <Header.Content style = {{color: \"deepskyblue\"}}>Travel times in minutes</Header.Content>\r\n                </Header>\r\n                <Grid  style={{height:\"100%\"}} padded>\r\n                    <Grid.Column style = {{background:'navy', width:'3.75vw'}}>0 - {timeDiff}</Grid.Column>\r\n                    <Grid.Column style = {{background:'royalblue', width:'3.75vw'}}>{timeDiff} - {timeDiff*2}</Grid.Column>\r\n                    <Grid.Column style = {{background:'seagreen', width:'3.75vw'}}>{timeDiff*2} - {timeDiff*3}</Grid.Column>\r\n                    <Grid.Column style = {{width:\"4.5vw\"}} color = \"yellow\">{timeDiff*3} - {timeDiff*4}</Grid.Column>\r\n                    <Grid.Column style = {{background:'darkorange', width:'5vw'}}>{timeDiff*4} - {timeDiff*5}</Grid.Column>\r\n                    <Grid.Column style = {{background:'maroon', width:'3.75vw'}}>{timeDiff*5}+</Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        }\r\n        return(\r\n            <Control position=\"bottomright\">\r\n                {segment}\r\n\r\n            </Control>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport {Button, Icon} from \"semantic-ui-react\";\r\nimport './index.css';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link,\r\n    useRouteMatch,\r\n    useParams\r\n} from \"react-router-dom\";\r\nexport default class Title extends React.Component {\r\n\r\n\r\n    render() {\r\n\r\n        const dict = this.props.activeDomains;\r\n        let method = this.props.method;\r\n        let methodBoolean;\r\n        if (method === 'Car') {\r\n\r\n            methodBoolean = true;\r\n        } else {\r\n            methodBoolean = false;\r\n        }\r\n\r\n        return (\r\n\r\n            <div className=\"side-bar-container\">\r\n                {\r\n                    methodBoolean ?\r\n\r\n                        <div>\r\n                            <Button.Group inverted vertical icon color=\"blue\" size=\"big\" className=\"side-bar\">\r\n                                <Button active={dict[\"City\"]} icon onClick={() => this.props.changeDomain('City')}><Icon\r\n                                    name='globe' size=\"big\"/>\r\n                                    <br/>\r\n                                    <br/>\r\n                                    City<br/>Map\r\n                                </Button>\r\n                                <Button active={dict[\"GP\"]} icon onClick={() => this.props.changeDomain('GP')}>\r\n                                    <Icon name='doctor' size=\"big\"/>\r\n                                    <br/>\r\n                                    <br/>\r\n                                    GPs\r\n                                </Button>\r\n                                <Button active={dict[\"PrimarySchool\"]} icon onClick={() => this.props.changeDomain('PrimarySchool')}>\r\n                                    <Icon name='building' size=\"big\"/>\r\n                                    <br/>\r\n                                    <br/>\r\n                                    Primary<br/> Schools\r\n                                </Button>\r\n                                <Button active={dict[\"SecondarySchool\"]} icon onClick={() => this.props.changeDomain('SecondarySchool')}>\r\n                                    <Icon name='building' size=\"big\"/>\r\n                                    <br/>\r\n                                    <br/>\r\n                                    Secondary<br/>Schools\r\n                                </Button>\r\n                                <Button active={dict[\"PostOffice\"]} icon onClick={() => this.props.changeDomain('PostOffice')}>\r\n                                    <Icon name='envelope' size=\"big\"/>\r\n                                    <br/>\r\n                                    <br/>\r\n                                    Post<br/> Offices\r\n                                </Button>\r\n                                <Button active={dict[\"ShoppingFacilities\"]} icon onClick={() => this.props.changeDomain('ShoppingFacilities')}>\r\n                                    <Icon name='shop' size=\"big\"/>\r\n                                    <br/>\r\n                                    <br/>\r\n                                    Shopping<br/> Facilities\r\n                                </Button>\r\n                            </Button.Group>\r\n                            <div className=\"restnormal\">\r\n                                <div className=\"footer\">\r\n                                    <p>Leonard Magyar - University of Strathcylde 2019/2020</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        :\r\n                        <div>\r\n                            <Button.Group inverted vertical icon color=\"blue\" size=\"big\" className=\"side-bar\">\r\n                                <Button active={dict[\"City\"]} icon onClick={() => this.props.changeDomain('City')}><Icon name='globe'\r\n                                                                                                      size=\"big\"/>\r\n\r\n                                    <br/>\r\n                                    <br/>\r\n                                    City<br/>Map\r\n                                </Button>\r\n                                <Button active={dict[\"GP\"]} icon onClick={() => this.props.changeDomain('GP')}>\r\n                                    <Icon name='doctor' size=\"big\"/>\r\n                                    <br/>\r\n                                    <br/>\r\n                                    GPs\r\n                                </Button>\r\n                                <Button active={dict[\"PostOffice\"]} icon onClick={() => this.props.changeDomain('PostOffice')}>\r\n                                    <Icon name='envelope' size=\"big\"/>\r\n                                    <br/>\r\n                                    <br/>\r\n                                    Post<br/> Offices\r\n                                </Button>\r\n                                <Button active={dict[\"ShoppingFacilities\"]} icon onClick={() => this.props.changeDomain('ShoppingFacilities')}>\r\n                                    <Icon name='shop' size=\"big\"/>\r\n                                    <br/>\r\n                                    <br/>\r\n                                    Shopping<br/> Facilities\r\n                                </Button>\r\n                            </Button.Group>\r\n\r\n                            <div className=\"rest\">\r\n                                <div className=\"footerrest\">\r\n                                    <p>Leonard Magyar - University of Strathcylde 2019/2020</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                }\r\n            </div>\r\n\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport {Grid, Icon} from \"semantic-ui-react\";\r\nimport './index.css';\r\nexport default class Title extends React.Component {\r\n\r\n    render() {\r\n        return(\r\n            <Grid.Column textAlign='center' className = \"title\">\r\n                <div className = \"header-text\">\r\n                    <p>City Planner</p>\r\n                </div>\r\n                <div className = \"header-icon\">\r\n                    <Icon inverted  name='pen square' color = \"blue\" size = \"huge\" />\r\n                </div>\r\n            </Grid.Column>\r\n        );\r\n    }\r\n}","import ReactDOM from \"react-dom\";\r\nimport {Button, Icon} from \"semantic-ui-react\";\r\nimport ReactFileReader from 'react-file-reader';\r\nimport React, { Component } from \"react\";\r\n\r\n\r\n\r\nexport default class Import extends Component {\r\n\r\n    onChange = (event) => {\r\n        var reader = new FileReader();\r\n        reader.onload = this.onReaderLoad;\r\n        reader.readAsText(event.target.files[0]);\r\n\r\n    };\r\n\r\n    onReaderLoad = (event) => {\r\n        console.log(JSON.parse(event.target.result));\r\n        this.props.gettingImportedJson(JSON.parse(event.target.result));\r\n        /*alert(event.target.result);\r\n        var obj = JSON.parse(event.target.result);\r\n        console.log(obj.features[5]);*/\r\n    };\r\n\r\n    render(url) {\r\n        const downloadFile = async () => {\r\n            console.log(this.props.geoJSON);\r\n            const fileName = \"CityPlanner_GeoJSON\";\r\n            const blob = new Blob([JSON.stringify(this.props.geoJSON)],{type:'application/json'});\r\n            const href = await URL.createObjectURL(blob);\r\n            const link = document.createElement('a');\r\n            link.href = href;\r\n            link.download = fileName + \".json\";\r\n            document.body.appendChild(link);\r\n            link.click();\r\n            document.body.removeChild(link);\r\n        };\r\n\r\n        return (\r\n            <div>\r\n                <Button.Group inverted vertical color=\"blue\">\r\n                    <Button icon labelPosition=\"left\" as=\"label\" htmlFor=\"file\" type=\"button\">\r\n                        <Icon name = \"upload\"/>\r\n                        Import\r\n                    </Button>\r\n            <input type=\"file\" accept=\"application/JSON\" id=\"file\" style={{ visibility: \"hidden\" }} onChange={this.onChange} />\r\n                    <Button icon labelPosition=\"left\" onClick={downloadFile}>\r\n                        <Icon name = \"download\"/>\r\n                        Export\r\n                    </Button>\r\n                </Button.Group>\r\n                </div>\r\n\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport {Button, Grid, Icon} from \"semantic-ui-react\";\r\nimport Title from './Title';\r\nimport Import from\"./Import\";\r\nimport './index.css';\r\nexport default class Header extends React.Component {\r\n\r\n    gettingImported = (imported) =>{\r\n        this.props.parentCallback(imported);\r\n    }\r\n\r\n    render() {\r\n        let city = this.props.city;\r\n        let method = this.props.method;\r\n        let glasgow;\r\n        let car;\r\n\r\n        if(city === \"Glasgow\"){\r\n            glasgow = true;\r\n        }\r\n        else{\r\n            glasgow=false;\r\n        }\r\n        if(method === \"Car\"){\r\n            car = true;\r\n        }\r\n        else{\r\n            car = false;\r\n        }\r\n        return (\r\n            <div className=\"header\">\r\n                <Grid>\r\n                    <Grid.Column width = {2}>\r\n                        <div className=\"methodButtons\">\r\n                            <Button.Group inverted size='medium' color=\"blue\">\r\n                                <Button active = {car} icon onClick={ () => this.props.changeMethod('Car')}><Icon name='car'\r\n                                                                                      size=\"big\"/><br/><br/> Car</Button>\r\n                                <Button.Or/>\r\n                                <Button active = {!car} icon onClick={ () => this.props.changeMethod('PublicTransport')}><Icon name='bus'\r\n                                                                                                  size=\"big\"/><br/><br/>Public\r\n                                    Transport</Button>\r\n                            </Button.Group>\r\n                        </div>\r\n                    </Grid.Column >\r\n                  <Grid.Column width = {5}>\r\n                      <div className = \"importButtons\">\r\n                      <Import\r\n                          gettingImportedJson={this.gettingImported}\r\n                          geoJSON={this.props.geoJSON}\r\n                      />\r\n                  </div>\r\n                  </Grid.Column>\r\n                    <Grid.Column width = {5}>\r\n                    <Title/>\r\n                    </Grid.Column>\r\n\r\n                    <Grid.Column textAlign='right' width={4}>\r\n                        <div className=\"cityButtons\">\r\n                            <Button.Group inverted size='huge' color=\"blue\">\r\n                                <Button active = {glasgow} onClick={() => this.props.changeCity(\"Glasgow\")}>Glasgow</Button>\r\n                                <Button.Or/>\r\n                                <Button active = {!glasgow} onClick={() => this.props.changeCity(\"Edinburgh\")}>Edinburgh</Button>\r\n                            </Button.Group>\r\n                        </div>\r\n                    </Grid.Column>\r\n\r\n                </Grid>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport {List, Segment, Accordion, Icon} from \"semantic-ui-react\";\nimport Control from \"react-leaflet-control\";\nimport _ from 'lodash'\nimport './index.css';\n\nexport default class ChangeList extends React.Component {\n\n    populateContents = (array) =>{\n        console.log(array);\n        let arrayOfContents = [];\n\n        for(let i=0; i<array.length; i++){\n            let currentContent = \"\";\n\n            for(let k = 0; k<Object.keys(array[i][\"NeighbouringDataZones\"]).length; k++) {\n\n                let carTime;\n                let ptTime;\n                //get key and value, create a string (line) ,push string line to current content\n                let dz = Object.keys((array[i][\"NeighbouringDataZones\"][k]));\n                if(\"CarChanges\" in array[i][\"NeighbouringDataZones\"][k][dz]) {\n\n                    carTime = \"Car: \" + array[i][\"NeighbouringDataZones\"][k][dz][\"CarChanges\"] + \"\";\n                }\n                if(\"PTChanges\" in array[i][\"NeighbouringDataZones\"][k][dz]) {\n                    ptTime = \"Public Transport: \" + array[i][\"NeighbouringDataZones\"][k][dz][\"PTChanges\"];\n                }\n\n                let line = dz + \"\\n\";\n\n                currentContent = currentContent + line;\n                if(carTime) {\n                    line = carTime + \"\\n\";\n                    currentContent = currentContent+line;\n                }\n                if(ptTime){\n                    line = ptTime +\"\\n\"+\"\\n\";\n                    currentContent = currentContent+line;\n                }\n\n            }\n            //push string (currentContent) to array\n            arrayOfContents.push(currentContent);\n\n        }\n        console.log(arrayOfContents.toString());\n        return arrayOfContents;\n\n    };\n\n\n    render() {\n\n\n        const changes = this.props.changes;\n        const contents = this.populateContents(changes);\n\n        /*const level1Panels = _.times(changes.length, (i) => ({\n            key: `panel-${i}`,\n            title: changes[i][\"Facility\"].concat(\" in \" + changes[i][\"DataZone\"]),\n            content: {content : Level1Content}\n        }));\n\n        const Level1Content = (\n            <div>\n                <Accordion.Accordion panels={level1Panels} />\n            </div>\n        );*/\n\n\n\n        const panels = _.times(changes.length, (i) => ({\n            key: `panel-${i}`,\n            title: changes[i][\"Facility\"].concat(\" in \" + changes[i][\"DataZone\"]),\n            content:  {content : contents[i]}\n        }));\n\n\n        return(\n            <Control>\n                <Segment inverted style={{background: \"rgba(36,54,101,0.7)\", height:\"57vh\", width:\"14vw\"}}>\n                    Facilites recently added:\n                    <Accordion style={{overflow: 'auto', maxHeight: 375}} className=\"accordion\"\n                               exclusive={false}\n                               panels={panels}\n                               styled\n                               fluid\n                    >\n                    </Accordion>\n                </Segment>\n            </Control>\n        );\n    }\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GlasgowMap from './GlasgowMap.js';\n\n\nReactDOM.render(<GlasgowMap >\n</GlasgowMap>, document.getElementById('root'));\n"],"sourceRoot":""}