{"version":3,"sources":["AddButton.js","GlasgowMap.js","Spinner.js","Scale.js","SideButtons.js","Title.js","Header.js","ChangeList.js","index.js"],"names":["current","expression","mapCenter","zoomLevel","Spinner","type","color","height","width","React","Component","Scale","timeDiff","segment","this","props","method","Segment","inverted","style","background","Content","Grid","columns","padded","Column","position","facilities","key","text","value","borderColor","datazones","datazoneCoordinates","AddButton","handleOpen","setState","modalOpen","handleFacilityChange","event","data","addFacility","handleDataZoneChange","addDataZone","handleClose","geo","a","async","listitems","state","concat","datacode","parseInt","substr","coords","push","sourcepolygon","turf","sourcecentroid","turfCentroid","neighbours","getNeighbours","points","getCoordinates","calculateTravelTimes","pairs","neighbouringDatazones","Set","selectedCode","n","range","currentkey","j","length","JSON","stringify","includes","add","Array","from","currentCode","polygon","centroid","coordinates","sourcepoint","destpoints","promises","times","axiosConfig","headers","dataPost","geometry","axios","post","then","res","minute","results","locations","properties","travel_time","time","Math","round","catch","err","console","log","Promise","all","calculatePTravelTimes","dataPost1","checkChanges","i","features","DataZone","CarTravelTimes","PublicTransportTravelTimes","parentCallback","parentCallbackSumbit","populateDropdown","code","Name","geojson","Modal","size","trigger","Button","onClick","circular","icon","Icon","name","onClose","open","Header","className","Fragment","Dropdown","placeholder","fluid","selection","onChange","options","search","Actions","positive","labelPosition","content","Title","methodBoolean","dict","activeDomains","Group","vertical","active","changeDomain","textAlign","glasgow","car","city","changeMethod","Or","changeCity","ChangeList","anyad","dataZone","List","Item","map","listitem","L","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","GlasgowMap","callbackFunction","childData","callbackFunctionSubmit","datazone","dataZoneList","getGlasgow","isFetching","get","domain","stateCopy","Object","assign","url","document","title","Map","minZoom","center","zoom","TileLayer","attribution","GeoJSON","feature","weight","fillOpacity","onEachFeature","layer","bindPopup","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.2aba222e.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Button, Icon, Modal, Dropdown} from \"semantic-ui-react\";\r\nimport Control from \"react-leaflet-control\";\r\nimport axios from 'axios';\r\nimport turfCentroid from \"@turf/centroid\";\r\nimport * as turf from \"@turf/helpers\";\r\n\r\n\r\n    const facilities = [{\r\n        key: 'GP',\r\n        text: 'GP',\r\n        value: 'GP',\r\n        style:{color:\"deepskyblue\", background:\"#243665\", borderColor:\"deepskyblue\"}\r\n    },\r\n        {\r\n            key: 'Primary School',\r\n            text: 'Primary School',\r\n            value: 'PrimarySchool',\r\n            style:{color:\"deepskyblue\", background:\"#243665\", borderColor:\"deepskyblue\"}\r\n        },\r\n        {\r\n            key: 'Secondary School',\r\n            text: 'Secondary School',\r\n            value: 'SecondarySchool',\r\n            style:{color:\"deepskyblue\", background:\"#243665\", borderColor:\"deepskyblue\"}\r\n        },\r\n        {\r\n            key: 'Post Office',\r\n            text: 'Post Office',\r\n            value: 'PostOffice',\r\n            style:{color:\"deepskyblue\", background:\"#243665\", borderColor:\"deepskyblue\"}\r\n        },\r\n        {\r\n            key: 'Shopping Facility',\r\n            text: 'Shopping Facility',\r\n            value: 'ShoppingFacilities',\r\n            style:{color:\"deepskyblue\", background:\"#243665\", borderColor:\"deepskyblue\"}\r\n        },\r\n    ];\r\n    const datazones = [];\r\n\r\n\r\n    let current;\r\n    let expression;\r\n    let datazoneCoordinates = {};\r\n\r\nexport default class AddButton extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            modalOpen : false,\r\n            addFacility: \"\",\r\n            addDataZone: \"\",\r\n            listitems: []\r\n        };\r\n    }\r\n    handleOpen = () => this.setState({ modalOpen: true });\r\n\r\n    handleFacilityChange = (event, data) => {\r\n        this.setState({addFacility: data.value});\r\n    };\r\n\r\n    handleDataZoneChange = (event, data) => {\r\n      this.setState({addDataZone: data.value});\r\n    };\r\n\r\n    handleClose = async (geo) => {\r\n        this.setState({\r\n            modalOpen : false,\r\n            listitems : this.state.listitems.concat(this.state.addDataZone),\r\n        });\r\n\r\n        let datacode = parseInt(this.state.addDataZone.substr(1));\r\n        let coords = [];\r\n        coords.push(datazoneCoordinates[datacode]);\r\n        let sourcepolygon = turf.polygon(coords);\r\n        let sourcecentroid = turfCentroid(sourcepolygon);\r\n\r\n        let neighbours = this.getNeighbours();\r\n\r\n        let points = this.getCoordinates(neighbours);\r\n\r\n\r\n        this.calculateTravelTimes(sourcecentroid,points,geo);\r\n\r\n        // await this.checkChanges(times,geo);\r\n\r\n        //console.log(geo);\r\n       //\r\n\r\n    };\r\n\r\n    getNeighbours = () => {\r\n        let pairs;\r\n        let neighbouringDatazones = new Set();\r\n        let selectedCode = parseInt(this.state.addDataZone.substr(1));\r\n        pairs = datazoneCoordinates[selectedCode];\r\n\r\n        //looping through other data zone to check if points match with selected data zone\r\n        let range = 100;\r\n        let minus1 = -1;\r\n        let minusrange = range * minus1;\r\n        let padding = \"S0\";\r\n        //loop through data zones within a code range of given amount\r\n        for (var n = minusrange; n < range; n++) {\r\n            let currentkey = selectedCode + n;\r\n            //check selected datazone coordinates against other data zone coordinates\r\n            if(currentkey in datazoneCoordinates && (padding+currentkey != this.state.addDataZone)){\r\n            for (var j = 0; j < pairs.length; j++) {\r\n                    if ((JSON.stringify(datazoneCoordinates[currentkey]).includes(JSON.stringify(pairs[j])))) {\r\n                        neighbouringDatazones.add(\"S0\"+currentkey);\r\n                    }\r\n            }\r\n            }\r\n        }\r\n\r\n        return Array.from(neighbouringDatazones);\r\n    };\r\n    getCoordinates = (neighbours) => {\r\n\r\n        let currentCode;\r\n        let coordinates = [];\r\n        let polygon;\r\n        let centroid;\r\n        let pairs= {};\r\n        for(var a = 0; a < neighbours.length; a++) {\r\n            currentCode =neighbours[a];\r\n            let current = parseInt(currentCode.substr(1));\r\n            coordinates.push(datazoneCoordinates[current]);\r\n            polygon = turf.polygon(coordinates);\r\n            centroid = turfCentroid(polygon);\r\n            pairs[currentCode] = centroid;\r\n        }\r\n\r\n        return pairs;\r\n    };\r\n\r\n    calculateTravelTimes = async (sourcepoint, destpoints,geo) => {\r\n\r\n\r\n        let promises = [];\r\n        let times = {};\r\n\r\n\r\n        let axiosConfig = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json',\r\n                'X-Application-Id': 'cd8dab5e',\r\n                'X-Api-Key': '3b67e6f052bc7121e2f6bcb917024443'\r\n            }\r\n        };\r\n\r\n        for (let key in destpoints) {\r\n            times[key] = {};\r\n            let dataPost = {\r\n                \"locations\": [\r\n                    {\r\n                        \"id\": \"Facility\",\r\n                        \"coords\": {\r\n                            \"lat\": sourcepoint.geometry.coordinates[1],\r\n                            \"lng\": sourcepoint.geometry.coordinates[0]\r\n                        }\r\n                    },\r\n                    {\r\n                        \"id\": \"DataZone centroid\",\r\n                        \"coords\": {\r\n                            \"lat\": destpoints[key].geometry.coordinates[1],\r\n                            \"lng\": destpoints[key].geometry.coordinates[0]\r\n                        }\r\n                    }\r\n                ],\r\n                \"departure_searches\": [\r\n                    {\r\n                        \"id\": \"departure search example\",\r\n                        \"departure_location_id\": \"Facility\",\r\n                        \"arrival_location_ids\": [\r\n                            \"DataZone centroid\"\r\n                        ],\r\n                        \"transportation\": {\r\n                            \"type\": \"driving\"\r\n                        },\r\n                        \"departure_time\": \"2020-02-20T10:00:00Z\",\r\n                        \"properties\": [\"travel_time\", \"distance\", \"route\"]\r\n                    }\r\n                ]\r\n            };\r\n\r\n            promises.push(\r\n                axios.post('https://api.traveltimeapp.com/v4/routes', dataPost, axiosConfig)\r\n                    .then((res) => {\r\n                        let minute = (res.data.results[0].locations[0].properties[0].travel_time) / 60;\r\n\r\n                        let time = Math.round(minute * 10) / 10;\r\n                        times[key][\"Car\"] = time;\r\n\r\n                    })\r\n                    .catch((err) => {\r\n                        console.log(\"AXIOS ERROR: \", err);\r\n                    })\r\n            );\r\n        }\r\n\r\n        console.log(times);\r\n        Promise.all(promises).then(() =>this.calculatePTravelTimes(sourcepoint, destpoints,times,geo));\r\n    };\r\n    calculatePTravelTimes = async (sourcepoint, destpoints,times, geo) => {\r\n\r\n        let promises = [];\r\n\r\n        let axiosConfig = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json',\r\n                'X-Application-Id': 'cd8dab5e',\r\n                'X-Api-Key': '3b67e6f052bc7121e2f6bcb917024443'\r\n            }\r\n        };\r\n\r\n        for (let key in destpoints) {\r\n\r\n            let dataPost1 = {\r\n                \"locations\": [\r\n                    {\r\n                        \"id\": \"Facility\",\r\n                        \"coords\": {\r\n                            \"lat\": sourcepoint.geometry.coordinates[1],\r\n                            \"lng\": sourcepoint.geometry.coordinates[0]\r\n                        }\r\n                    },\r\n                    {\r\n                        \"id\": \"DataZone centroid\",\r\n                        \"coords\": {\r\n                            \"lat\": destpoints[key].geometry.coordinates[1],\r\n                            \"lng\": destpoints[key].geometry.coordinates[0]\r\n                        }\r\n                    }\r\n                ],\r\n                \"departure_searches\": [\r\n                    {\r\n                        \"id\": \"departure search example\",\r\n                        \"departure_location_id\": \"Facility\",\r\n                        \"arrival_location_ids\": [\r\n                            \"DataZone centroid\"\r\n                        ],\r\n                        \"transportation\": {\r\n                            \"type\": \"public_transport\"\r\n                        },\r\n                        \"departure_time\": \"2020-02-20T10:00:00Z\",\r\n                        \"properties\": [\"travel_time\", \"distance\", \"route\"]\r\n                    }\r\n                ]\r\n            };\r\n\r\n            promises.push(\r\n                axios.post('https://api.traveltimeapp.com/v4/routes', dataPost1, axiosConfig)\r\n                    .then((res) => {\r\n                        let minute = (res.data.results[0].locations[0].properties[0].travel_time) / 60;\r\n\r\n                        let time = Math.round(minute * 10) / 10;\r\n                        times[key][\"PT\"] = time;\r\n\r\n                    })\r\n                    .catch((err) => {\r\n                        console.log(\"AXIOS ERROR: \", err);\r\n                    })\r\n            );\r\n        }\r\n\r\n\r\n        console.log(times);\r\n        Promise.all(promises).then(() =>this.checkChanges(times,geo));\r\n    };\r\n\r\n\r\n    checkChanges = async(times, geo)  => {\r\n        console.log(\"most leptem be\");\r\n\r\n        for (let key in times) {\r\n\r\n            for (let i = 0; i < geo.features.length; i++){\r\n                if(geo.features[i].properties.DataZone === key){\r\n                    //compare new time with old time for neighbours\r\n                    if(geo.features[i].properties.CarTravelTimes[this.state.addFacility] > times[key][\"Car\"]){\r\n\r\n                        geo.features[i].properties.CarTravelTimes[this.state.addFacility] = times[key][\"Car\"]\r\n                    }\r\n                    if(geo.features[i].properties.PublicTransportTravelTimes[this.state.addFacility] > times[key][\"PT\"]){\r\n\r\n                        geo.features[i].properties.PublicTransportTravelTimes[this.state.addFacility] = times[key][\"PT\"]\r\n                    }\r\n                }\r\n                //assign  0 travel time to data zone facility is located in\r\n                else if(geo.features[i].properties.DataZone === this.state.addDataZone) {\r\n\r\n                    geo.features[i].properties.CarTravelTimes[this.state.addFacility] = \"1.0\";\r\n                    geo.features[i].properties.PublicTransportTravelTimes[this.state.addFacility] = \"1.0\";\r\n                }\r\n                else{\r\n\r\n                }\r\n\r\n            }\r\n        }\r\n        console.log(\"checkchanges finished\");\r\n        this.props.parentCallback(geo);\r\n        this.props.parentCallbackSumbit(this.state.listitems);\r\n    };\r\n\r\n    //to load all data zones in dropdown options\r\n   populateDropdown = (data) => {\r\n       let code;\r\n       let coords;\r\n       for (let i = 0; i < data.features.length; i++) {\r\n           current = data.features[i].properties;\r\n           expression = current.Name + \" (\" + current.DataZone + \")\";\r\n           datazones[i] = {\r\n               key: expression,\r\n               text: expression,\r\n               value: current.DataZone,\r\n               style:{color:\"deepskyblue\", background:\"#243665\", borderColor:\"deepskyblue\"},\r\n           };\r\n           //also populates datazone coordinates dictionary\r\n           code = parseInt(current.DataZone.substr(1));\r\n           coords = data.features[i].geometry.coordinates[0];\r\n           datazoneCoordinates[code] = coords;\r\n       }\r\n       return datazones;\r\n   };\r\n\r\n\r\n\r\n    render() {\r\n\r\n        const geojson = this.props.geo;\r\n\r\n        return(\r\n\r\n            <Control position=\"topright\" >\r\n                <Modal  size = \"tiny\"\r\n                    trigger={ <Button onClick = {this.handleOpen}\r\n                                      style = {{color: \"deepskyblue\", background:\"#243665\"}}\r\n                                      circular icon> <Icon name = \"plus\" size =\"large\"></Icon>   </Button>}\r\n                        onClose={this.handleClose}\r\n                        open={this.state.modalOpen}\r\n                       >\r\n                    <Modal.Header className = \"modalHeader\">\r\n                        <p>Adding facility</p>\r\n                    </Modal.Header>\r\n                    <Modal.Content className = \"modalContent\" >\r\n                        <React.Fragment >\r\n                    <Dropdown className = \"modalDropdown\"\r\n                        placeholder='Select Facility'\r\n                        fluid\r\n                        selection\r\n                              onChange = {this.handleFacilityChange}\r\n                        options={facilities}\r\n                    />\r\n                            {<br/>}\r\n\r\n                            <Dropdown className = \"modalDropdown\"\r\n                                placeholder='Select Data Zone'\r\n                                fluid\r\n                                search\r\n                                selection\r\n                                onChange = {this.handleDataZoneChange}\r\n                                options={this.populateDropdown(geojson)}\r\n                            />\r\n\r\n                        </React.Fragment>\r\n                    </Modal.Content>\r\n                    <Modal.Actions className = \"modalAction\">\r\n                        <Button className = \"modalButton\"\r\n                            onClick={()=> this.handleClose(geojson)}\r\n                            positive\r\n                            labelPosition='right'\r\n                            icon='checkmark'\r\n                            content='Done'\r\n                        />\r\n                    </Modal.Actions>\r\n            </Modal>\r\n            </Control>\r\n\r\n\r\n        );\r\n    }\r\n}","import React from 'react';\nimport { Map, TileLayer, GeoJSON, Marker} from 'react-leaflet';\nimport \"leaflet/dist/leaflet.css\";\nimport './index.css';\nimport Spinner from './Spinner';\nimport Scale from './Scale';\nimport AddButton from \"./AddButton\";\nimport SideButtons from \"./SideButtons\";\nimport Header from \"./Header\"\nimport ChangeList from \"./ChangeList\";\nimport axios from 'axios';\nimport 'semantic-ui-css/semantic.min.css'\nimport L from 'leaflet';\n\ndelete L.Icon.Default.prototype._getIconUrl;\n\nL.Icon.Default.mergeOptions({\n    iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n    iconUrl: require('leaflet/dist/images/marker-icon.png'),\n    shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n});\n\nlet mapCenter;\nlet zoomLevel;\nlet minZoomLevel;\nlet time = 0;\n\nconst tileLayerAtrribute = '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors';\nlet tileLayerUrl = 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';\n\nlet glasgow = \"https://api.npoint.io/aa3a9094c684db09d0f8\";\n\nlet methodBoolean = true;\nclass GlasgowMap extends React.Component {\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            isFetching: true,\n            geo: [],\n            domain: \"City\",\n            method: 'Car',\n            city: \"Glasgow\",\n            dataZoneList:[],\n            activeDomains: {\n                \"City\": true,\n                \"GP\": false,\n                \"PrimarySchool\": false,\n                \"SecondarySchool\": false,\n                \"PostOffice\": false,\n                \"ShoppingFacilities\": false\n            },\n\n        };\n    }\n\n    callbackFunction = (childData) => {\n        this.setState({geo: childData});\n    };\n\n    callbackFunctionSubmit = (datazone) => {\n        console.log(datazone);\n        this.setState({\n            dataZoneList: datazone\n        });\n    };\n\n    componentDidMount() {\n        document.title = 'CTYPLNR';\n        this.getGlasgow();\n    };\n\n    getGlasgow = () => {\n\n        this.setState({isFetching: true});\n        axios.get(glasgow).then(res => {\n            this.setState({\n                isFetching: false,\n                geo: res.data,\n                domain: 'City',\n            });\n        });\n    };\n\n    changeMethod = (method) => {\n        if(method === \"PublicTransport\" && (this.state.domain === \"PrimarySchool\" || this.state.domain === \"SecondarySchool\")){\n            this.changeDomain(\"City\");\n        }\n        this.setState({\n            method: method\n        });\n    };\n\n    changeDomain = (domain) => {\n        let stateCopy = Object.assign({}, this.state);\n        stateCopy.activeDomains[this.state.domain] = false;\n        stateCopy.domain = domain;\n        stateCopy.activeDomains[stateCopy.domain] = true;\n        this.setState(\n            stateCopy\n        );\n    };\n\n    changeCity = (city) => {\n        let url = \"\";\n        if (city === \"Glasgow\"){\n            url = \"https://api.npoint.io/aa3a9094c684db09d0f8\"\n        }\n        else{\n            url = \"https://api.npoint.io/f7c3649ae02eea7f5e92\"\n        }\n\n        this.setState({isFetching: true});\n        axios.get(url).then(res => {\n            this.setState({\n                isFetching: false,\n                geo: res.data,\n                city: city\n            });\n        });\n        methodBoolean = true;\n\n    };\n\n\n   render() {\n\n        console.log(\"re-rendering...\");\n\n\n        const { isFetching, geo, domain, method,city} = this.state;\n        if(city === \"Glasgow\"){\n            mapCenter = [55.8595, -4.2518];\n            zoomLevel = 12;\n            minZoomLevel = zoomLevel;\n\n        }\n        else{\n            mapCenter = [55.933251, -3.268267];\n            zoomLevel = 12;\n\n        }\n\n        let map;\n        if(isFetching){\n            map = <div className = \"spinner-container\"><Spinner></Spinner></div>\n        }\n        else{\n                map = <Map className=\"map\"\n                           minZoom = {zoomLevel}\n                           center={mapCenter}\n                           zoom={zoomLevel}\n                >\n                    <TileLayer\n                        attribution={tileLayerAtrribute}\n                        url={tileLayerUrl}\n                    />\n\n\n                    <AddButton\n                        geo={this.state.geo}\n                        parentCallback={this.callbackFunction}\n                        parentCallbackSumbit = {this.callbackFunctionSubmit}\n\n\n                    />\n                    <ChangeList\n                        dataZone={this.state.dataZoneList}\n                        />\n\n                    <Scale\n                        method = {this.state.method}\n                    />\n\n                    <GeoJSON\n                        data={geo}\n                        style={getStyle}\n                        onEachFeature={onEachFeature}/>\n                </Map>\n\n        }\n\n\n        function getStyle(feature){\n            let timeDiff;\n            if(domain !== \"City\"){\n                if(method === \"Car\") {\n                    time = feature.properties.CarTravelTimes[domain];\n                    timeDiff = 1;\n                    //console.log(feature.properties.CarTravelTimes, feature.properties.CarTravelTimes[\"SecondarySchool\"]);\n                }\n                else{\n                        time = feature.properties.PublicTransportTravelTimes[domain];\n                        timeDiff = 3;\n                    }\n                }\n            else{\n                return{\n                color:\"black\",\n                    weight: 1.5,\n                    fillOpacity:0.4\n\n                 }\n            }\n\n                if(time >= 0 && time < timeDiff){\n                    return{\n                        color: \"navy\",\n                        weight: 1.5\n                    }\n                }\n                else if(time >= timeDiff && time < timeDiff*2){\n                    return{\n                        color:\"royalblue\",\n                        weight: 1.5,\n                        fillOpacity:0.5\n                    }\n                }\n                else if(time >= timeDiff*2 && time < timeDiff*3){\n                    return{\n                        color:\"seagreen\",\n                        weight: 1.5,\n                        fillOpacity:0.5\n                    }\n                }\n                else if(time >= timeDiff*3 && time < timeDiff*4){\n                    return{\n                        color:\"yellow\",\n                        weight: 1.5,\n                        fillOpacity:0.5\n                    }\n\n                }\n                else if(time >= timeDiff*4 && time < timeDiff*5){\n                    return{\n                        color:\"orange\",\n                        weight: 1.5,\n                        fillOpacity:0.5\n                    }\n\n                }\n                else if(time >= timeDiff*5){\n                    return{\n                        color:\"maroon\",\n                        weight: 1.5,\n                        fillOpacity:0.5\n                    }\n            }\n                else{\n                return {\n                    color:\"white\",\n                    weight: 1.5,\n                    fillOpacity:0.75\n                }}\n            }\n\n       function onEachFeature (feature, layer) {\n           layer.bindPopup(\"Name: \" + feature.properties.Name + \"<br>\" + \"Time: \" + feature.properties.DataZone);\n       }\n\n       return (\n\n            <div className = \"main\"\n\n            >\n              <Header\n                  city = {this.state.city}\n                  method = {this.state.method}\n                  changeMethod = {this.changeMethod}\n                  changeCity = {this.changeCity}\n              />\n\n                {map}\n\n                <SideButtons\n                    method = {this.state.method}\n                    changeDomain = {this.changeDomain}\n                    activeDomains = {this.state.activeDomains}\n                    />\n                </div>\n        );\n    }\n}\n\nexport default GlasgowMap;\n","import \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\r\nimport Loader from 'react-loader-spinner'\r\nimport React from 'react';\r\nexport default class Spinner extends React.Component {\r\n\r\n    render() {\r\n        return(\r\n            <Loader\r\n                type=\"Oval\"\r\n                color=\"deepskyblue\"\r\n                height={300}\r\n                width={300}\r\n\r\n\r\n            />\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport {Grid, Header, Segment} from \"semantic-ui-react\";\r\nimport Control from \"react-leaflet-control\";\r\nexport default class Scale extends React.Component {\r\n\r\n    render() {\r\n        let method = this.props.method;\r\n        let timeDiff,segment\r\n        if(method === \"Car\") {\r\n            timeDiff = 1;\r\n            segment = <Segment inverted style={{background: \"rgba(36,54,101,0.7)\", height:\"100%\", width:\"24vw\"}}>\r\n                <Header inverted>\r\n                    <Header.Content style = {{color: \"deepskyblue\"}}>Travel times in minutes</Header.Content>\r\n                </Header>\r\n                <Grid  columns=\"equal\" style={{ width: '22vw', height:\"100%\"}} padded>\r\n                    <Grid.Column style = {{background:'navy'}}>0 - {timeDiff}</Grid.Column>\r\n                    <Grid.Column style = {{background:'royalblue'}}>{timeDiff} - {timeDiff*2}</Grid.Column>\r\n                    <Grid.Column style = {{background:'seagreen'}}>{timeDiff*2} - {timeDiff*3}</Grid.Column>\r\n                    <Grid.Column color = \"yellow\">{timeDiff*3} - {timeDiff*4}</Grid.Column>\r\n                    <Grid.Column style = {{background:'darkorange'}}>{timeDiff*4} - {timeDiff*5}</Grid.Column>\r\n                    <Grid.Column style = {{background:'maroon'}}>{timeDiff*5}+</Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        }\r\n        else{\r\n            timeDiff = 3;\r\n            segment = <Segment inverted style={{background: \"#243665\", height:\"100%\", width:\"26.5vw\"}}>\r\n                <Header inverted>\r\n                    <Header.Content style = {{color: \"deepskyblue\"}}>Travel times in minutes</Header.Content>\r\n                </Header>\r\n                <Grid  style={{height:\"100%\"}} padded>\r\n                    <Grid.Column style = {{background:'navy', width:'3.75vw'}}>0 - {timeDiff}</Grid.Column>\r\n                    <Grid.Column style = {{background:'royalblue', width:'3.75vw'}}>{timeDiff} - {timeDiff*2}</Grid.Column>\r\n                    <Grid.Column style = {{background:'seagreen', width:'3.75vw'}}>{timeDiff*2} - {timeDiff*3}</Grid.Column>\r\n                    <Grid.Column style = {{width:\"4.5vw\"}} color = \"yellow\">{timeDiff*3} - {timeDiff*4}</Grid.Column>\r\n                    <Grid.Column style = {{background:'darkorange', width:'5vw'}}>{timeDiff*4} - {timeDiff*5}</Grid.Column>\r\n                    <Grid.Column style = {{background:'maroon', width:'3.75vw'}}>{timeDiff*5}+</Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        }\r\n        return(\r\n            <Control position=\"bottomright\">\r\n                {segment}\r\n\r\n            </Control>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport {Button, Icon} from \"semantic-ui-react\";\r\nimport './index.css';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link,\r\n    useRouteMatch,\r\n    useParams\r\n} from \"react-router-dom\";\r\nexport default class Title extends React.Component {\r\n\r\n\r\n    render() {\r\n\r\n        const dict = this.props.activeDomains;\r\n        let method = this.props.method;\r\n        let methodBoolean;\r\n        if (method === 'Car') {\r\n\r\n            methodBoolean = true;\r\n        } else {\r\n            methodBoolean = false;\r\n        }\r\n\r\n        return (\r\n            <Router>\r\n            <div className=\"side-bar-container\">\r\n                {\r\n                    methodBoolean ?\r\n\r\n                        <div>\r\n                            <Button.Group inverted vertical icon color=\"blue\" size=\"big\" className=\"side-bar\">\r\n                                <Button active={dict[\"City\"]} icon onClick={() => this.props.changeDomain('City')}><Icon\r\n                                    name='globe' size=\"big\"/>\r\n                                    <br/>\r\n                                    <br/>\r\n                                    City<br/>Map\r\n                                </Button>\r\n                                <Button active={dict[\"GP\"]} icon onClick={() => this.props.changeDomain('GP')}>\r\n                                    <Icon name='doctor' size=\"big\"/>\r\n                                    <br/>\r\n                                    <br/>\r\n                                    GPs\r\n                                </Button>\r\n                                <Button active={dict[\"PrimarySchool\"]} icon onClick={() => this.props.changeDomain('PrimarySchool')}>\r\n                                    <Icon name='building' size=\"big\"/>\r\n                                    <br/>\r\n                                    <br/>\r\n                                    Primary<br/> Schools\r\n                                </Button>\r\n                                <Button active={dict[\"SecondarySchool\"]} icon onClick={() => this.props.changeDomain('SecondarySchool')}>\r\n                                    <Icon name='building' size=\"big\"/>\r\n                                    <br/>\r\n                                    <br/>\r\n                                    Secondary<br/>Schools\r\n                                </Button>\r\n                                <Button active={dict[\"PostOffice\"]} icon onClick={() => this.props.changeDomain('PostOffice')}>\r\n                                    <Icon name='envelope' size=\"big\"/>\r\n                                    <br/>\r\n                                    <br/>\r\n                                    Post<br/> Offices\r\n                                </Button>\r\n                                <Button active={dict[\"ShoppingFacilities\"]} icon onClick={() => this.props.changeDomain('ShoppingFacilities')}>\r\n                                    <Icon name='shop' size=\"big\"/>\r\n                                    <br/>\r\n                                    <br/>\r\n                                    Shopping<br/> Facilities\r\n                                </Button>\r\n                            </Button.Group>\r\n                            <div className=\"restnormal\">\r\n                                <div className=\"footer\">\r\n                                    <p>Leonard Magyar - University of Strathcylde 2019/2020</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        :\r\n                        <div>\r\n                            <Button.Group inverted vertical icon color=\"blue\" size=\"big\" className=\"side-bar\">\r\n                                <Button active={dict[\"City\"]} icon onClick={() => this.props.changeDomain('City')}><Icon name='globe'\r\n                                                                                                      size=\"big\"/>\r\n\r\n                                    <br/>\r\n                                    <br/>\r\n                                    City<br/>Map\r\n                                </Button>\r\n                                <Button active={dict[\"GP\"]} icon onClick={() => this.props.changeDomain('GP')}>\r\n                                    <Icon name='doctor' size=\"big\"/>\r\n                                    <br/>\r\n                                    <br/>\r\n                                    GPs\r\n                                </Button>\r\n                                <Button active={dict[\"PostOffice\"]} icon onClick={() => this.props.changeDomain('PostOffice')}>\r\n                                    <Icon name='envelope' size=\"big\"/>\r\n                                    <br/>\r\n                                    <br/>\r\n                                    Post<br/> Offices\r\n                                </Button>\r\n                                <Button active={dict[\"ShoppingFacilities\"]} icon onClick={() => this.props.changeDomain('ShoppingFacilities')}>\r\n                                    <Icon name='shop' size=\"big\"/>\r\n                                    <br/>\r\n                                    <br/>\r\n                                    Shopping<br/> Facilities\r\n                                </Button>\r\n                            </Button.Group>\r\n\r\n                            <div className=\"rest\">\r\n                                <div className=\"footerrest\">\r\n                                    <p>Leonard Magyar - University of Strathcylde 2019/2020</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                }\r\n            </div>\r\n            </Router>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport {Grid, Icon} from \"semantic-ui-react\";\r\nimport './index.css';\r\nexport default class Title extends React.Component {\r\n\r\n    render() {\r\n        return(\r\n            <Grid.Column textAlign='center' className = \"title\">\r\n                <div className = \"header-text\">\r\n                    <p>City Planner</p>\r\n                </div>\r\n                <div className = \"header-icon\">\r\n                    <Icon inverted  name='pen square' color = \"blue\" size = \"huge\" />\r\n                </div>\r\n            </Grid.Column>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport {Button, Grid, Icon} from \"semantic-ui-react\";\r\nimport Title from './Title';\r\nimport './index.css';\r\nexport default class Header extends React.Component {\r\n\r\n    render() {\r\n        let city = this.props.city;\r\n        let method = this.props.method;\r\n        let glasgow;\r\n        let car;\r\n\r\n        if(city === \"Glasgow\"){\r\n            glasgow = true;\r\n        }\r\n        else{\r\n            glasgow=false;\r\n        }\r\n        if(method === \"Car\"){\r\n            car = true;\r\n        }\r\n        else{\r\n            car = false;\r\n        }\r\n        return (\r\n            <div className=\"header\">\r\n                <Grid columns=\"equal\">\r\n                    <Grid.Column>\r\n                        <div className=\"methodButtons\">\r\n                            <Button.Group inverted size='medium' color=\"blue\">\r\n                                <Button active = {car} icon onClick={ () => this.props.changeMethod('Car')}><Icon name='car'\r\n                                                                                      size=\"big\"/><br/><br/> Car</Button>\r\n                                <Button.Or/>\r\n                                <Button active = {!car} icon onClick={ () => this.props.changeMethod('PublicTransport')}><Icon name='bus'\r\n                                                                                                  size=\"big\"/><br/><br/>Public\r\n                                    Transport</Button>\r\n                            </Button.Group>\r\n                        </div>\r\n                    </Grid.Column>\r\n\r\n                    <Title/>\r\n\r\n                    <Grid.Column textAlign='right'>\r\n                        <div className=\"cityButtons\">\r\n                            <Button.Group inverted size='huge' color=\"blue\">\r\n                                <Button active = {glasgow} onClick={() => this.props.changeCity(\"Glasgow\")}>Glasgow</Button>\r\n                                <Button.Or/>\r\n                                <Button active = {!glasgow} onClick={() => this.props.changeCity(\"Edinburgh\")}>Edinburgh</Button>\r\n                            </Button.Group>\r\n                        </div>\r\n                    </Grid.Column>\r\n\r\n                </Grid>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport {List, Segment} from \"semantic-ui-react\";\r\nimport Control from \"react-leaflet-control\";\r\nimport './index.css';\r\nexport default class ChangeList extends React.Component {\r\n    state = {\r\n\r\n    };\r\n\r\n\r\n    render() {\r\n\r\n\r\n        const anyad = this.props.dataZone;\r\n        console.log(anyad);\r\n        const listitems = [\"List Item 1\", \"List Item 2\", \"List Item 3\", \"kaka\"]\r\n\r\n\r\n        return(\r\n            <Control>\r\n                <Segment inverted style={{background: \"rgba(36,54,101,0.7)\", height:\"57vh\", width:\"14vw\"}}>\r\n                    <React.Fragment>\r\n                        <List>\r\n                            <List.Item className=\"list-group\">\r\n                                {anyad.map(listitem => (\r\n                                    <List.Content key={listitem} className=\"list-group-item list-group-item-primary\">\r\n                                        {listitem}\r\n                                    </List.Content>\r\n                                ))}\r\n                            </List.Item>\r\n                            <List.Item>\r\n                                <List.Icon name='heart' />\r\n                                <List.Content>Hey Babe, I love you</List.Content>\r\n                            </List.Item>\r\n                        </List>\r\n                    </React.Fragment>\r\n                </Segment>\r\n            </Control>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GlasgowMap from './GlasgowMap.js';\n\n\nReactDOM.render(<GlasgowMap >\n</GlasgowMap>, document.getElementById('root'));\n"],"sourceRoot":""}